================================================================================
== Install a GCC and Qt                                                       ==
================================================================================
1. install a current version of the GNU compiler and install Qt ( tested on
   5.x) You can check the compiler and Qt versions, that have been used to build
   the current binary release of QF3 in the Help|About menu entry. It is advised
   to use a modern MinGW gcc compiler and a recent Qt version!


   -- LINUX --------------------------------------------------------------------
   On Linux: this can be done using your prefered distribution management.
   Make sure to also install the developer libraries for Qt, as
   you will need the link- and header-files!

   -- WINDOWS ------------------------------------------------------------------
   On windows: You will need a current version of Qt and the MinGW gcc compiler.
   There are several options to achieve this:
      1.1. You can download Qt and a QtCreator (including MinGW) from
               http://www.qt-project.org/
           This should work in most cases, but the compiler is a 32-bit version,
           so you can only create a 32-bit version of Qt.

      1.2. You can download a recent MinGW compiler, ideally from MinGW-builds:
               http://sourceforge.net/projects/mingwbuilds/
               we use: w32/w64, seh, 4.8.1, rev. 5, posix

      1.3. You can also use the 32/64-bit Qt builds from this resource:
               http://tver-soft.org/qt64
           Just make sure to choose the version with SEH exception handling
           (since that is required by the compiler, as mentioned above!!!) and
           OpenGL. They also provide an installer, which is supposed to contain
           a compiler also.
           NOTE: You might have to run the utility qtbinpatcher.exe, distributed
                 with the Qt archives, before using the binaries!


	Now you need to install MSys/MSys2, which provides a bash and several
	standard Linux/Unix tools.
	This tool will give you a full unix bash on Windows and should work with
	all MinGW/MinGW64 GCC compilers. SImply run the installer (usually I
	install it into a subdirectory \MSys\ of the MinGW installation. Also
	run the post-install steps. In these you need to answer "yes" you have a
	GCC/MinGW installed and yes, you want to configure MSys now. Finally you
	will have to give the full path to the MSys installation directory (the
	one, in which bin, lib, includes, ... recide). Note, that here you have
	to provide the path with slashed '/' instead of    backslashes '\'. So, if
	MinGW is installed in C:\development\MinGW64\, you have to enter
	C:/development/MinGW64/.
	For building the dependencies, you will also need some basic development
	tools in MSys. They can be installed in the MSys console:
		pacman -Syuu
		pacman -S--needed base-devel

	We recommend also installing git as a version management software for
	easier updates.

     Finally, you need to tell your windows system, where the Qt libs and tools
     can be found. To do this, you have to add its location to the system-wide
     PATH variable, or by modifying the file
         C:\development\MinGW64\MSys\msys.bat
     of your MSys to contain a line
        set PATH=C:\development\Qt32-4.8.6\bin;%PATH%
     where you only have to change the Qt-path accordingly.

   -- MACOS X ------------------------------------------------------------------
   On MacOS X you will have to install XCode first and then the Qt SDK. You can
   then compile QuickFit using QtCreator, as described below. QF3 then compiles
   with the clang installed by Apple along with XCode!
   Note: You'll have to run XCode at least once, so the command line tools
   (clang/gcc/...) are actually installed and activated after installing XCode
   and before compiling QuickFit.

================================================================================
== Download/Unpack QuickFit Sources                                           ==
================================================================================
2. The full sourcecode is available on GitHub:
         https://github.com/lukl/QuickFit3_rot/tree/rot-devel
   To set up the source code on your machine, you have two possibilities:
      (i) Download and unpack the source ZIP file
     (ii) [PREFERED]: Checkout the repository from GitHub (ensure to make a 
          "recursive" checkout, as the repository contains some other repositories 
          as submodules, which will  be cloned when giving the option --recursive):
             git clone --recursive -b rot-devel https://github.com/lukl/QuickFit3_rot/ <destination directory>
          Optional:
	Update submodules (all in the subfolder './extlibsb040').
          To do so, execute in the base directory of the repository:
              ./checkout_update_submodules.sh
          this script also switches all modules to their respective master-branch,
          which simplifies later submitting/pushing.
   
   Afterwards you will have a source repository with this contents:
     * The base directory contains the main QMake project quickfit.pro
     * All plugins are contained in the ./plugins/ subdirectory
     * The main application quickfit3.exe/app can be found in application
     * All outputs will be written into the folder ./output/
     * The folder ./extlibs contains several external dependencies and a script
       to build them
     * the folder ./extlibsb040 contains external libraries that are also from
       Dept. B040 and are added as submodules in this directory!
     * in the base directory you'll also find several images and .txt files,
       which describe how you can configure your system to compile QuickFit 3


================================================================================
== Build dependency libraries                                                 ==
================================================================================
QuickFit depends on a set of external open source libraries (GSL, libTIFF, cairo,
...). The source archive of QuickFit contains versions of these libraries, that
work well with QF3 and are also used by us to build the system. Also it contains
a bash script, that builds all these libaries. Note, that they are NOT installed
in the system, so they are only available for QuickFit and not to your Linux-
system or MinGW!!! So you can run the steps, described below savely on any Linux
system!!!

3. We will now build some of the dependency libraries needed for QuickFit3

   3.1 start a bash shell (or MSys on Win) and change to the directory
               ./extlibs
       of your QuickFit source tree.
   3.2 run the shell script ./build_dependencies.sh, which will build
       the external libraries, needed to build QuickFit 3 (e.g. libtiff,GSL,...)
       3.2.1 depending on the number of processors in your computer, select the
             appropriate number of threads to use for compile (typ. no of cores.)
       3.2.2 select "n" when asked if you want to keep the build directories,
             as this is a DEBUG function.
       3.2.3 choose whether to use agressive optimizations (e.g. -O3 -msse ...)
             Typically you can answer this question with (y)es!
       3.2.4 Choose whether to optimized for the local machine (e.g. --march=native).
             Note, that you might not be able to run the resulting binaries
             on another computer, if you choose "y".
             ON WINDOWS: answer no "n"
             ON LINUX: You can typically answer this questions with "y", as you
                       will build for the current machine only!
             ON MACOS X: Choose M, which switches off most optimization. This is
                         necessary, as the clang-compiler of MacOS does not
                         understand the same command-line switches as GCC on
                         Linux/Windows.
       3.2.5 If you want, you can use OpenMP to speed up some of the libraries.
             If you want that, answer this question with yes.     [default: "n"]
             We usually don't use OpenMP, as QF3 typically executes fits etc.
             already in parallel, so an addition parallelization by OpenMP will
             not lead to a significant speedup. Although: Some plugins might
             really profit from this! Note that OpenMP often add additional de-
             pendencies on external libraries to the binaries!!!
       3.2.6 On some system the script will ask you, whether position-independent
             code should be produced. Find out, whether you need the -fPIC option
             for your system (Linux: typically yes, Windows: no, MacOS: yes) and
             answer accordingly with y or n.
       3.2.7 Windows: copy Qt DLLs:
                 WINDOWS: NO (best do it by hand, see below!)
                 MacOS:   NO
                 Linux:   NO
       3.2.8 Should all other libraries be built without asking:
             Try yes by default.

library       | Linux               | Windows                            | MacOS X
---------------+---------------------+----------------------------------------------------------------
zlib          | y (but is usually   | y                                  | n (there is a zlib on MacOS X!)
              |    available anyways|                                    |
              |    so if this doesnt|                                    |
              |    work, QF3 will   |                                    |
              |    still compile)   |                                    |
lmfit         | y                   | y                                  | y
lmfit v5      | y                   | y                                  | y
levmar        | y                   | y                                  | y
libpng        | y                   | y                                  | y
libjpeg       | y                   | y                                  | y
libtiff       | y                   | y                                  | y
gsl           | y                   | y                                  | y
libusb        | y (if you want to   | y (if you want to build some       | n
              |    build some of the|    of the hardware drivers)        |
              |    hardware drivers)|                                    |
libNIDAQmx    | n (currently no     | n (this is for future              | n
              |    working LINUX    |    extensions!)                    |
              |    driver from Nat. |                                    |
              |    Instruments avail|                                    |
              |    able!!!)         |                                    |
libAndor      | n (you will have to | n (y only if you want to           | n
              |    install the andor|    build the Andor driver,         |
              |    SDK, as advised  |    which has to be activated       |
              |    by Andor and make|    explicitly in quickfit.inc!!!)  |
              |    sure, that gcc   |                                    |
              |    finds the SDK    |                                    |
              If you don't have libAndor, you'll have to set QF3CONFIG+=noandor in quickfit.inc
                           which switches off all macros that use libAndor!
eigen         | y                   | y                                  | y
cimg          | y                   | y                                  | y
nlopt         | y                   | y                                  | n (currently does not compile on MacOS X)
                        If this does not compile on your system, set
                              QF3CONFIG+=nonlopt in quickfit.inc
OOL           | y                   | y                                  | n (currently does not compile on MacOS X)
pixman        | y                   | y                                  | n (currently does not compile on MacOS X)
                        If this does not compile on your system, set
                              QF3CONFIG+=nocairo in quickfit.inc
                                Also, building cairo will fail!
cairo         | y                   | y                                  | n (currently does not compile on MacOS X)
                        If this does not compile on your system, set
                              QF3CONFIG+=nocairo in quickfit.inc
              |                     |                                    |
              
              
             Note: these libraries will not be installed globally for the system!!!
                   So they will not interfere with version already available!!!

                   If one or the other of these libraries is already available
                   on your system (with standard linker-parameters), then you can
                   in principle omit it above ... but the libs included in your
                   QF3 copy are tested to work with your QF3 version, so using
                   other version is on your own risk. Basically if a library on
                   your computer does not work, you can rerun the script and
                   build it in a second run!


   3.3 now we will build QuickFit 3 itself
       3.3.1 change to the base directory
       3.3.2 create a file quickfit.inc with the following contents (you can use
             one of the quickfit.inc.* files as template!):
                QF3CONFIG+=nohardwaredrivers
                QF3CONFIG+=nospecialdrivers
                QF3CONFIG+=noandor
                QF3CONFIG+=nospecials
             This will switch off all hardware drivers. If you want to build the
             microscope hardware drivers, comment out the appropriate lines.
             Changes these options ONLY IF YOU KNOW WHAT YOU ARE DING!!!
             See quickfit.inc.template for an example and an explanation of the
             additional options!

             On MacOS X, you should also add:
                QF3CONFIG+=nonlopt
                QF3CONFIG+=nocairo
             as/if these libs are not available on MacOS X.

             If you get errors about _aligned_malloc() not fopund, set:
                DEFINES += QF_DONT_USE_ALIGNED_MALLOC

            

       3.3.3 change to the base-driectory of the repository and
             run (make sure that your qmake points to the qmake of the Qt version
             you want to use ... possibly you'll have to add the absolute path
             to that tool!!!)
               RELEASE:   qmake quickfit3.pro "CONFIG+=release"
               DEBUG:     qmake quickfit3.pro
               
       3.3.4 run twice:
               make -jN
             where N=1 for a 1-core system 2 for a 2-core syste ... or leave
             away the -j option completely.
             NOTE: The first call will compile two libraries, but will end with
             a link error (library not found). This is normal due to the broken
             dependency checking of qmake, so simply run
               make -jN
             again.
             
       3.3.5 run
               make install -j16
             Now the online-help, examples and other asset files will be copied
             to the output directory. After this step QF3 is ready to run.
       3.3.6 you should have an executable
                     LINUX:  ./output/quickfit3
                     WIN:    ./output/quickfit3.exe
                     MACOS:  ./output/quickfit3.app
             now.
             Note: QuickFit 3.0 and all files it requires will be stored in the
                   directory ./output/.

             WINDOWS/LINUX: Run this to see whether everyting worked!
             MACOS X: Here, the compile process generates a halve-complete
                      app-bundle, which you'll have to complete by running an
                      additional bash script
                          ./output/macosx_bundle.sh
                      in the output directory! Please edit this script before
                      running it and make sure that the paths to the Qt-version
                      at the start of the script are correct! This script will
                      copy the required Qt frameworks, Qt plugins, QF3 plugins
                      and other QF3 assets/examples/sdks/... into the app-bundle,
                      which should then be ready for deployment and running!
       3.3.7 [WINDOWS] QuickFit requires some libraries to start, such as the
             Qt libs and MinGW runtime. These have to be found by quickfit3.exe,
             which can be ensured by copying them to the same directory as
             quickfit3.exe. The build_dependencies.sh script should have done
             this for most libs, but nevertheless, check this by checking, if
             these files are present in the same directory as quickfit3.exe:
                libgcc_s_dw2-1.dll   (if present in MinGW/bin)
                libgcc_s_seh-1.dll   (if present in MinGW/bin)
                libstdc++-6.dll      (if present in MinGW/bin)
                libusb-1.0.dll       (if radhard2 plugins were built)
                libwinpthread-1.dll  (if present in MinGW/bin)
                mingwm10.dll         (if present in MinGW/bin)
             for Qt4.x:
                QtCore4.dll (and QtCore4d.dll for debug-builds)
                QtGui4.dll (and QtGui4d.dll for debug-builds)
                QtMultimedia4.dll (and QtMultimedia4d.dll for debug-builds)
                QtNetwork4.dll (and QtNetwork4d.dll for debug-builds)
                QtOpenGL4.dll (and QtOpenGL4d.dll for debug-builds)
                QtScript4.dll (and QtScript4d.dll for debug-builds)
                QtScriptTools4.dll (and QtScriptTools4d.dll for debug-builds)
                QtSvg4.dll (and QtSvg4d.dll for debug-builds)
                QtXml4.dll (and QtXml4d.dll for debug-builds)
                also copy all the subfolders of the Qt plugins folder into the
                ./output/qtplugins/ folder of QuickFit!
             for Qt5.x:
                icudt54.dll   (if present in Qt/bin dir)
                icuin54.dll   (if present in Qt/bin dir)
                icuuc54.dll   (if present in Qt/bin dir)
                libeay32.dll  (if present in Qt/bin dir)
                ssleay32.dll  (if present in Qt/bin dir)
                libEGL.dll    (if present in Qt/bin dir)
                libGLESv2.dll (if present in Qt/bin dir)
                Qt5Concurrent.dll
                Qt5Core.dll
                Qt5Gui.dll
                Qt5Multimedia.dll
                Qt5MultimediaWidgets.dll
                Qt5Network.dll
                Qt5OpenGL.dll
                Qt5PrintSupport.dll
                Qt5Script.dll
                Qt5ScriptTools.dll
                Qt5Svg.dll
                Qt5Widgets.dll
                Qt5WinExtras.dll
                Qt5Xml.dll

                also copy all the subfolders of the Qt plugins folder into the
                ./output/qtplugins/ folder of QuickFit! Make sure to have
                the platform plugin, as all Qt applications need that (i.e. the
                plugins in the ./QTDIR/plugins/platforms directory should be
                copied to ./output/qtplugins/platforms/
             If one of the files is missing AND QF3 does not start, you can copy
             it to the output directory from either the MinGW/bin directory or
             the QT/bin directory (where MinGW and Qt have to be replaced by the
             appropriate paths on your system!)


================================================================================
== Build QuickFit using QtCreator (ALTERNATIVE!!!)                            ==
================================================================================
  * You can also copile QF3 (step 3.3) using Qt Creator. To do so, load the
    project quickfit3.pro and make sure NOT to use "shadow builds"
    (out-of-source builds). When the project is loaded, go to the project
    options and set:
      + "distclean" instead of "clean" for the clean-call to make
      + add an install step "make install"
  * Screenshots of example configurations for Kits, ... in QtCreator are
    available in the base directory of the source tree (qtcreator_*.png and
    build_quickfit3_config_qtcreator_*.png)
  * Note: On MacOS X you'll still have to run the script
      ./output/macosx_bundle.sh
    from a terminal after building QF3! (Possibly you can run this script as
    a deploy step!




================================================================================
== TROUBLESHOOTING                                                            ==
================================================================================
* In some cases, the dependency libraries are not built correctly with position-
  independent code (PIC) on Linux. This problem especially arrises with lmfit v5.
  If the dependency-build-script asks you, whether PIC should be set, answer
  with YES. (On windows all code seems to be PIC, so this is omitted and you can
  ignore the according warnings!)
* If some of the libraries in extlibs make problems: You can deactivate several
  plugins, by their use of a lirary in quickfit.inc ... See above and the provi-
  ded templates for this file for details.
